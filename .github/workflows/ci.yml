name: CI

on:
  push:
    branches: [main, master]
  pull_request:
    types: [opened, closed]
    branches: [main, master]

jobs:
  log:
    name: Log GitHub Events
    runs-on: ubuntu-latest
    env:
      COMMIT_LOG_API: ${{ secrets.COMMIT_LOG_API }}
      GITHUB_LOGIN: ${{ github.actor }}
      COMMITS: ${{ toJSON(github.event.commits) }}
      REPOSITORY_URL: ${{ github.repositoryUrl }}
      EVENT_TYPE: ${{ github.event_name }}
      EVENT_ACTION: ${{ github.event.action }}
      PR_MERGED: ${{ github.event.pull_request.merged }}
      PR_CREATED_AT: ${{ github.event.pull_request.created_at }}
      PR_CLOSED_AT: ${{ github.event.pull_request.closed_at }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0   

      - name: Set up Python for Logging
        uses: actions/setup-python@v3
        with:
          python-version: "^3.9"

      - name: Install Dependencies for Logging
        run: |
          python -m pip install --upgrade pip
          pip install --user pipenv
          pipenv --python $(which python)
          pipenv install pytz python-dateutil build requests gitcommitlogger

      - name: Log pull request opened
        if: ${{ github.event_name == 'pull_request' && github.event.action == 'opened' }}
        run: |
          pipenv run gitcommitlogger -r $(echo $REPOSITORY_URL) \
                                      -t pull_request_opened \
                                      -d $(echo $PR_CREATED_AT) \
                                      -un $(echo $GITHUB_LOGIN) \
                                      -o commit_stats.csv \
                                      -u $(echo $COMMIT_LOG_API) -v

      - name: Log pull request closed and merged
        if: ${{ github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true }}
        run: |
          echo $COMMITS > commits.json
          cat commits.json  # debugging output
          pipenv run gitcommitlogger -r $(echo $REPOSITORY_URL) \
                                      -t pull_request_merged \
                                      -d $(echo $PR_CLOSED_AT) \
                                      -un $(echo $GITHUB_LOGIN) \
                                      -i commits.json \
                                      -o commit_stats.csv \
                                      -u $(echo $COMMIT_LOG_API) -v

      - name: Log pull request closed without merge
        if: ${{ github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == false }}
        run: |
          pipenv run gitcommitlogger -r $(echo $REPOSITORY_URL) \
                                      -t pull_request_closed \
                                      -d $(echo $PR_CLOSED_AT) \
                                      -un $(echo $GITHUB_LOGIN) \
                                      -o commit_stats.csv \
                                      -u $(echo $COMMIT_LOG_API) -v

      - name: Log push events
        if: ${{ github.event_name == 'push' }}
        run: |
          echo $COMMITS > commits.json
          cat commits.json  # debugging output
          pipenv run gitcommitlogger -r $(echo $REPOSITORY_URL) \
                                      -t $(echo $EVENT_TYPE) \
                                      -i commits.json \
                                      -o commit_stats.csv \
                                      -u $(echo $COMMIT_LOG_API) -v

  lint-and-format:
    name: Lint, Format, and Test Subsystems
    runs-on: ubuntu-latest
    strategy:
      matrix:
        subdir: [ web-app, machine-learning-client ]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Python for ${{ matrix.subdir }}
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install Dependencies in ${{ matrix.subdir }}
        if: ${{ hashFiles(format('{0}/**/*.py', matrix.subdir)) != '' }}
        run: |
          cd ${{ matrix.subdir }}
          python -m pip install --upgrade pip
          python -m pip install pipenv
          pipenv sync --dev --python $(which python)

      - name: Lint with pylint in ${{ matrix.subdir }}
        if: ${{ hashFiles(format('{0}/**/*.py', matrix.subdir)) != '' }}
        run: |
          cd ${{ matrix.subdir }}
          pipenv run pylint **/*.py

      - name: Format Check with black in ${{ matrix.subdir }}
        if: ${{ hashFiles(format('{0}/**/*.py', matrix.subdir)) != '' }}
        run: |
          cd ${{ matrix.subdir }}
          pipenv run black --diff --check .